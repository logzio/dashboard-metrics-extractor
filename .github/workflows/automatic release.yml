
name: Build Workflow

on:
  push:
    branches: main

jobs:
 createrelease:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
     - name: check headcommit message
       id: commit
       run: |
         str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"
         echo ::set-output name=title::${str%%\\n*} | tr -d '"'
         echo ::set-output name=body::${str##*\\n} | tr -d '"'
     - name: Create Release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{steps.commit.outputs.title}}
         release_name: ${{steps.commit.outputs.title}}
         body: |                                                                
            ${{ steps.commit.outputs.body}}
         draft: false
         prerelease: false
     - name: Output Release URL File
       run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
     - name: Save Release URL File for publish
       uses: actions/upload-artifact@v1
       with:
         name: release_url
         path: release_url.txt
 build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos 
            CMD_BUILD: 
                pyinstaller --onefile -w -n extract extract.py
            OUT_FILE_NAME: extract
            ASSET_MIME: application
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -n extract extract.py
            OUT_FILE_NAME: extract.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
